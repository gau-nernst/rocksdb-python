name: Build RocksDB
on:
  push:
    paths:
      - '!.github/workflows/*'
      - .github/workflows/build_rocksdb.yaml
      - setup.py
      - src/*
      - tests/*

env:
  ROCKSDB_VERSION: v8.0.0

jobs:
  linux:
    runs-on: ubuntu-latest
    container:
      image: quay.io/pypa/${{ matrix.tag }}
    strategy:
      fail-fast: false
      matrix:
        tag: [manylinux2014_x86_64, musllinux_1_1_x86_64]
    env:
      ARTIFACT_NAME: rocksdb_${{ matrix.tag }}
    steps:
      - name: Checkout RocksDB
        uses: actions/checkout@v3
        with:
          repository: facebook/rocksdb
          ref: ${{ env.ROCKSDB_VERSION }}

      - name: Build RocksDB
        run: |
          make rocksdbjavastatic_deps -j $(nproc)
          export CPATH=$CPATH:$(ls -d zlib-*/)
          export CPATH=$CPATH:$(ls -d bzip2-*/)
          export CPATH=$CPATH:$(ls -d snappy-*/):$(ls -d snappy-*/build/)
          export CPATH=$CPATH:$(ls -d lz4-*/lib/)
          export CPATH=$CPATH:$(ls -d zstd-*/lib/):$(ls -d zstd-*/lib/dictBuilder/)
          make static_lib -j $(nproc)
        env:
          PORTABLE: 1
          EXTRA_CFLAGS: -fPIC -g0
          EXTRA_CXXFLAGS: -fPIC -g0

      - name: Package
        run: |
          mkdir lib
          mv *.a lib
          tar -czvf ${{ env.ARTIFACT_NAME }}.tar.gz include lib

      - name: Upload built libs
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_NAME }}.tar.gz

  macos:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, arm64]
    env:
      CC: clang
      CXX: clang++
      MACOSX_DEPLOYMENT_TARGET: "10.13"  # min required by RocksDB
      ARTIFACT_NAME: rocksdb_macos_${{ matrix.arch }}
    steps:
      - name: Checkout RocksDB
        uses: actions/checkout@v3
        with:
          repository: facebook/rocksdb
          ref: ${{ env.ROCKSDB_VERSION }}

      - name: Build RocksDB
        run: |
          make rocksdbjavastatic_deps -j $(sysctl -n hw.ncpu)
          rm libz.a libbz2.a
          export CPATH=$CPATH:$(ls -d snappy-*/):$(ls -d snappy-*/build/)
          export CPATH=$CPATH:$(ls -d lz4-*/lib/)
          export CPATH=$CPATH:$(ls -d zstd-*/lib/):$(ls -d zstd-*/lib/dictBuilder/)
          make static_lib -j $(sysctl -n hw.ncpu)
        env:
          ARCHFLAG: -arch ${{ matrix.arch }}
          PORTABLE: 1
          EXTRA_CFLAGS: -fPIC -g0
          EXTRA_CXXFLAGS: -fPIC -g0

      - name: Package
        run: |
          mkdir lib
          mv *.a lib
          tar -czvf ${{ env.ARTIFACT_NAME }}.tar.gz include lib

      - name: Upload built libs
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_NAME }}.tar.gz

  windows:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, ARM64]
    env:
      CMAKE_FLAGS: -G "Visual Studio 17 2022" -A ${{ matrix.arch }} -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=0
      MSBUILD_FLAGS: /m /p:Configuration=Release
      ARTIFACT_NAME: rocksdb_windows_${{ matrix.arch }}

      ZLIB_VERSION: v1.2.13
      BZIP2_VERSION: '1.0.8'
      SNAPPY_VERSION: '1.1.8'
      LZ4_VERSION: v1.9.3
      ZSTD_VERSION: v1.4.9
    steps:
      - name: Checkout RocksDB
        uses: actions/checkout@v3
        with:
          repository: facebook/rocksdb
          ref: ${{ env.ROCKSDB_VERSION }}

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Build ZLib
        run: |
          git clone https://github.com/madler/zlib --branch=${{ env.ZLIB_VERSION }}
          mkdir zlib/build
          cd zlib/build
          cmake ${{ env.CMAKE_FLAGS }} ../
          msbuild zlib.sln ${{ env.MSBUILD_FLAGS }}
          cp Release/zlibstatic.lib ../../z.lib

      - name: Build Bzip2
        run: |
          git clone https://gitlab.com/bzip2/bzip2 --branch=bzip2-${{ env.BZIP2_VERSION }}
          cd bzip2
          ${{ env.MSVC_PREFIX }}\CL.exe /c blocksort.c huffman.c crctable.c randtable.c compress.c decompress.c bzlib.c
          ${{ env.MSVC_PREFIX }}\Lib.exe  /OUT:bz2.lib *.obj

        env:
          MSVC_PREFIX: C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\bin\HostX64\${{ matrix.arch }}

      - name: Build Snappy
        run: |
          git clone https://github.com/google/snappy/ --branch=${{ env.SNAPPY_VERSION }}
          mkdir snappy/build
          cd snappy/build
          cmake ${{ env.CMAKE_FLAGS }} -DSNAPPY_BUILD_TESTS=0 -DSNAPPY_REQUIRE_AVX2=1 ../
          msbuild Snappy.sln ${{ env.MSBUILD_FLAGS }}
          cp Release/*.lib ../..

      - name: Build LZ4
        run: |
          git clone https://github.com/lz4/lz4 --branch=${{ env.LZ4_VERSION }}
          cd lz4/build
          cmake ${{ env.CMAKE_FLAGS }} -DLZ4_BUILD_CLI=0 -DLZ4_BUILD_LEGACY_LZ4C=0 -DLZ4_BUNDLED_MODE=1 ./cmake
          msbuild LZ4.sln ${{ env.MSBUILD_FLAGS }}
          cp Release/*.lib ../..

      - name: Build Zstd
        run: |
          git clone https://github.com/facebook/zstd --branch=${{ env.ZSTD_VERSION }}
          cd zstd/build
          cmake ${{ env.CMAKE_FLAGS }} -DZSTD_LEGACY_SUPPORT=0 -DZSTD_BUILD_PROGRAMS=0 -DZSTD_BUILD_TESTS=0 -DZSTD_BUILD_SHARED=0 ./cmake
          msbuild zstd.sln ${{ env.MSBUILD_FLAGS }}
          cp lib/Release/zstd_static.lib ../../zstd.lib

      - name: Build rocksdb
        run: |
          mkdir build
          cd build
          cmake ${{ env.CMAKE_FLAGS }} -DWITH_SNAPPY=1 -DWITH_LZ4=1 -DWITH_ZLIB=1 -DWITH_ZSTD=1 -DXPRESS=1 `
            -DROCKSDB_BUILD_SHARED=0 -DWITH_BENCHMARK_TOOLS=0 -DWITH_TRACE_TOOLS=0 -DWITH_CORE_TOOLS=0 -DWITH_TOOLS=0 ../
          msbuild rocksdb.sln ${{ env.MSBUILD_FLAGS }}
          cp Release/*.lib ..
        env:
          ZLIB_INCLUDE: zlib;zlib/build
          SNAPPY_INCLUDE: snappy;snappy/build
          LZ4_INCLUDE: lz4/lib
          ZSTD_INCLUDE: zstd/lib;zstd/lib/dictBuilder

      - name: Package
        run: |
          mkdir lib
          mv *.lib lib
          tar -czvf ${{ env.ARTIFACT_NAME }}.tar.gz include lib

      - name: Upload built libs
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_NAME }}.tar.gz
