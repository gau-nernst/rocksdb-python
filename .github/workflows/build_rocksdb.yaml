name: Build RocksDB
on:
  push:
    paths:
      - '!.github/workflows/*'
      - .github/workflows/build_rocksdb.yaml
      - setup.py
      - src/*
      - tests/*

jobs:
  linux:
    runs-on: ubuntu-latest
    container:
      image: quay.io/pypa/${{ matrix.tag }}
    strategy:
      fail-fast: false
      matrix:
        tag: [manylinux2014_x86_64, musllinux_1_1_x86_64]
    steps:
      - name: Checkout RocksDB
        uses: actions/checkout@v3
        with:
          repository: facebook/rocksdb
          ref: v8.0.0

      - name: Build RocksDB
        run: |
          make rocksdbjavastatic_deps -j $(nproc)
          mv zlib-*/*.h bzip2-*/*.h snappy-*/*.h snappy-*/build/*.h lz4-*/lib/*.h zstd-*/lib/*.h zstd-*/lib/dictBuilder/*.h include/
          make static_lib -j $(nproc)
          mkdir lib
          mv *.a lib/
        env:
          PORTABLE: 1
          EXTRA_CFLAGS: -fPIC -g0
          EXTRA_CXXFLAGS: -fPIC -g0

      - name: Upload built libs
        uses: actions/upload-artifact@v3
        with:
          name: rocksdb_${{ matrix.tag }}
          path: |
            include/
            lib/

  macos:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, arm64]
    env:
      CC: clang
      CXX: clang++
      MACOSX_DEPLOYMENT_TARGET: "10.13"  # min required by RocksDB
    steps:
      - name: Checkout RocksDB
        uses: actions/checkout@v3
        with:
          repository: facebook/rocksdb
          ref: v8.0.0

      - name: Build RocksDB
        run: |
          make rocksdbjavastatic_deps -j $(sysctl -n hw.ncpu)
          rm libz.a libbz2.a
          mv snappy-*/*.h snappy-*/build/*.h lz4-*/lib/*.h zstd-*/lib/*.h zstd-*/lib/dictBuilder/*.h include/
          make static_lib -j $(sysctl -n hw.ncpu)
          mkdir lib
          mv *.a lib/
        env:
          ARCHFLAG: -arch ${{ matrix.arch }}
          PORTABLE: 1
          EXTRA_CFLAGS: -fPIC -g0
          EXTRA_CXXFLAGS: -fPIC -g0

      - name: Upload built libs
        uses: actions/upload-artifact@v3
        with:
          name: rocksdb_macos_${{ matrix.arch }}
          path: |
            include/
            lib/

  windows:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, ARM64]
    env:
      CMAKE_FLAGS: -G "Visual Studio 17 2022" -A ${{ matrix.arch }} -DCMAKE_BUILD_TYPE=Release
      MSBUILD_FLAGS: /m /p:Configuration=Release
    steps:
      - name: Checkout RocksDB
        uses: actions/checkout@v3
        with:
          repository: facebook/rocksdb
          ref: v8.0.0

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Build ZLib
        run: |
          git clone https://github.com/madler/zlib --branch=v1.2.13
          mkdir zlib/build
          cd zlib/build
          cmake ${{ env.CMAKE_FLAGS }} ../
          msbuild zlib.sln ${{ env.MSBUILD_FLAGS }}
          cp Release/*.lib ..

      - name: Build Snappy
        run: |
          git clone https://github.com/google/snappy/ --branch=1.1.8
          mkdir snappy/build
          cd snappy/build
          cmake ${{ env.CMAKE_FLAGS }} -DSNAPPY_BUILD_TESTS=0 ../
          msbuild Snappy.sln ${{ env.MSBUILD_FLAGS }}
          cp Release/*.lib ..

      - name: Build LZ4
        run: |
          git clone https://github.com/lz4/lz4 --branch=v1.9.3
          cd lz4/build
          cmake ${{ env.CMAKE_FLAGS }} -DLZ4_BUILD_CLI=0 -DLZ4_BUILD_LEGACY_LZ4C=0 -DLZ4_BUNDLED_MODE=1 ./cmake
          msbuild LZ4.sln ${{ env.MSBUILD_FLAGS }}
          cp Release/*.lib ..

      - name: Build Zstd
        run: |
          git clone https://github.com/facebook/zstd --branch=v1.4.9
          cd zstd/build
          cmake ${{ env.CMAKE_FLAGS }} -DZSTD_LEGACY_SUPPORT=0 -DZSTD_BUILD_PROGRAMS=0 -DZSTD_BUILD_TESTS=0 ./cmake
          msbuild zstd.sln ${{ env.MSBUILD_FLAGS }}
          cp lib/Release/*.lib ..

      - name: Build rocksdb
        run: |
          mkdir build
          cd build
          cmake ${{ env.CMAKE_FLAGS }} -DWITH_SNAPPY=1 -DWITH_LZ4=1 -DWITH_ZLIB=1 -DWITH_ZSTD=1 -DXPRESS=1 `
            -DPORTABLE=1 -DROCKSDB_BUILD_SHARED=0 -DWITH_BENCHMARK_TOOLS=0 -DWITH_TRACE_TOOLS=0 -DWITH_CORE_TOOLS=0 -DWITH_TOOLS=0 ../
          msbuild rocksdb.sln ${{ env.MSBUILD_FLAGS }}
          cp Release/*.lib ..
        env:
          ZLIB_INCLUDE: zlib;zlib/build
          SNAPPY_INCLUDE: snappy;snappy/build
          LZ4_INCLUDE: lz4/lib
          ZSTD_INCLUDE: zstd/lib;zstd/lib/dictBuilder

      - name: Upload built libs
        uses: actions/upload-artifact@v3
        with:
          name: rocksdb_windows_${{ matrix.arch }}
          path: '*.lib'

  # publish_wheels:
  #   name: Publish wheels
  #   if: github.event.inputs.make_release == 'true'
  #   needs: build_wheels
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         submodules: recursive
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: wheels
  #         path: wheelhouse
  #     - name: Create release
  #       run: gh release create ${{ github.event.inputs.tag }} ./wheelhouse/*.whl --generate-notes
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
